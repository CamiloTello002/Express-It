**Yarn not installing node modules inside the current folder but outside?**
Check if the outer folder has a package.json file. If it does, then you can remove it and try to install the packages inside the api folder

I recapped something: when you call the model method, you must do it with the first letter in lowercase (model instead of Model)

I did recap a lot of things :0

vamos por: 1:05:42

YARN stands for Yet Another Resource Navigator


**PASWORD SALTING**
reference:https://www.techtarget.com/searchsecurity/definition/salt#:~:text=With%20password%20salting%2C%20a%20random,when%20the%20users%20enter%20them.
Salting is a technique that consists of adding 32 or more characters to the password BEFORE hashing it
This avoids hackers from reverse-engineering passwords
Process:
when a user logs in, the passwords runs through a one-way hashing algorithm. This string is compared to the other hashes ALREADY STORED in the website's database

There's one problem: if two passwords are the same, then the hash resulting from them ends up being identical
But the salting adds RANDOM characters to each passwords, making them UNIQUE
this prevents us from three threats:
- brute-force attacks (hackers try every combination)
- dictionary attacks (try the most common combinations)
- rainbow table attacks (pre-computed database of decrypted hash passwords)

**Just a little theory**
CRUD are the four basic operations of PERSISTENT STORAGE
Concepts:
-> The fundamental feature of of a storage location is that its CONTENT is both READABLE and UPDATABLE
-> Before being read and updated, it must first be CREATED.
-> At some later point, the storage location may need to be DESTRUCTED (deleted)

Each operation can be mapped to a standard SQL statement:
Create -> INSERT
Read -> SELECT
Update -> UPDATE 
Delete -> DELETE

Or an HTTP method:
Create -> POST, PUT
Read -> GET
Update -> PUT (replace), PATCH (modify)
Delete -> DELETE

before making the distinction between a POST and PUT request, let's read about idempotent HTTP methods:
An HTTP method is IDEMPOTENT if the intended effect on the server of making a SINGLE request is THE SAME as the effect of making MULTIPLE identical requests.
But be careful, it can also have some SIDE EFFECTS, such as logging the request (made by the server)

So, the PUT request IS idempotent, the POST request IS NOT

POST /add_row HTTP/1.1
POST /add_row HTTP/1.1   -> Adds a 2nd row
POST /add_row HTTP/1.1   -> Adds a 3rd row

In the case of DELETE method, even though the received status code is different, it's still idempotent
DELETE /idX/delete HTTP/1.1   -> Returns 200 if idX exists
DELETE /idX/delete HTTP/1.1   -> Returns 404 as it just got deleted
DELETE /idX/delete HTTP/1.1   -> Returns 404


**Mongoose queries**
There are two ways to achieve this: by passing a callback function or using the promise

What does the query look like? As a JSON document
We can store the query in a variable and then chain methods to it so that we execute the query later

**IMPORTANT THING TO KEEP IN MIND**
If we DON'T AWAIT for the query, we're not really making the query to the database, it's just a query stored in the program.
What does this enable us to do? We can keep on building up the query by chaining methods

Why AREN'T queries promises?
Because when you append a then() method, you're EXECUTING the query. It means that if you chain multiple then() methods, an error will be thrown.

If we want to INCLUDE documents from other collections, we must have a look at **POPULATION**.

**A LITTLE MORE THEORY**
Streaming data is data that is emitted at HIGH VOLUME in a *continuous*, incremental manner with the GOAL of LOW-LATENCY processing

**Characteristics of streaming data**
-> *Chronologically significant*: All individual elements contain timestamps
-> *Continuously flowing*: has no beginning or end. It collects data constantly as long as required (example: server activity logs)
So what? Node.js provides a stream interface for dealing with this kind of data.
Examples of this kind of data:
· Request to an HTTP server
· process.stdout
All streams are instances of EventEmitter
FOUR types of stream types:
- Writable
- Readable 
- Duplex (both readable and writable such as net.Socket)
- Transform (duplex streams that can modify the data as it's written and read)

So what with Mongoose? 
We can STREAM the results of a query from MongoDB. QueryCursor can help us.
Example:
---------------------------------
--- This code will print documents one at a time
const cursor = Person.find({occupation: /host/}).cursor();

for (let doc = await cursor.next(); doc != null; doc = await cursor.next()){
    console.log(doc);
}

--- Another way to do it is with *async iterators*:
for await (const doc of Person.find())
    console.log(doc);
-----------------------------------
What happens with cursors? They're subject to cursor timeouts (the cursor will be closed after 10 minutes)
If we want to override this, use the noCursorTimeout flag

Pro tip: use queries WHERE POSSIBLE. Only aggregate if REALLY needed

A conclusion: queries allow us to UPDATE, DELETE and READ
QUERIES ARE NOT FOR CREATING


**LITTLE RECAP ABOUT ERRORS**
*Operational errors*: They happen when software is USED INCORRECTLY (or maybe in a way that wasn't intended)
*Examples of operational errors*: dividing by zero, file not found, out-of-memory, user not found, invalid password
In our API, we'll throw operational errors when the user used the API in a non intended way

**About next() function**
Whenever you have a middleware and you see it doesn't send any response that terminates the request/response cycle, you MUST call the next() function so that it can go on. Otherwise, the request will be left hanging
The next() function IS NOT PART OF SOME API, it's just the THIRD ARGUMENT that is passed to the MIDDLEWARE function. That means it can be called anything but, for convention, it's named next().


**ERROR HANDLING WITH EXPRESS MIDDLEWARE**
Dude, this is the most important thing you've probably learned so far...
LEARN THIS BY HEART: The error handling middleware ALWAYS USES FOUR ARGUMENTS (reference: https://expressjs.com/es/guide/using-middleware.html#middleware.error-handling)
No matter the name you give to the arguments, IT MUST HAVE FOUR ARGUMENTS so that Express interprets the middleware as an error handler middleware
Example:
app.use(function(err, req, res, next) {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});
Repeat after me:
THE  ERROR  MIDDLEWARE  IS  ALWAYS  DEFINED  LAST.
Example:
const bodyParser = require('body-parser')
const methodOverride = require('method-override')

app.use(bodyParser.urlencoded({
  extended: true
}))
app.use(bodyParser.json())
app.use(methodOverride())
app.use((err, req, res, next) => {
  // logic
})

Of course, you can define multiple error handler middlewares 
Another thing to keep in mind is that ANYTHING you pass to the next() function is interpreted as an error. If you look at the definition of next(), you'll get the following
next(err?: any): void

vamos por el... 1:14:17



Okay, so let's have a look at the create method in Mongoose...
create is defined like this:
create<DocContents = AnyKeys<TRawDocType>>(doc: DocContents | TRawDocType): Promise<THydratedDocumentType>;
The type for doc is DocContents, and its default type is AnyKeys. AnyKeys is defined like this:
  export type AnyKeys<T> = { [P in keyof T]?: T[P] | any };
From here, we already know that it accepts an OBJECT

A little recap about jwt...
JWT is a message format
It's a compact and URL-safe way of passing a JSON message between two parties
Each part of the token is base64 url-encoded
The token can be a signed token or an encrypted token
signed token has three parts: header, payload and signature
encrypted token has 5 parts: header, encrypted key, IV, payload and authentication tag.


**ABOUT SESSION COOKIES...**
Session cookies are, intuitively, cookies that last for a session.
Duration of a session? Starts when you LAUNCH a website or app, ends when you leave the website OR close your browser window
Session cookies are NEVER stored in your device
Other names...
transient cookies, non-persistent cookies, temporary cookies
*Why session cookies?*
You need to take something into account
-> A website itself CANNOT track a user's movement on its webpage. It means that every page request is treated as a NEW REQUEST from a NEW USER.
Well, session cookies ALLOW WEBSITES TO REMEMBER USERS
These cookies tell the server what pages to show the user
This is why session cookies are VITAL FOR USER EXPERIENCE such as online shops and websites 

**JUST LEARNED FROM A MISTAKE**
When you specify the origin for cors, ONLY UNTIL THE PORT, don't add the extra slash

declare function forEach<T>(arr: T[], callback: (el: T) => undefined): void;

The keyword declare tells Typescript that the function EXISTS, and it's implementation is done elsewhere.
arr: T[] is an array of elements of type T. T is a generic type parameter. It means that the type of the array elements can be ANY type. This allows the forEach function to work with arrays of different types, such as numbers, strings or custom objects

